// This section is optional, these are some configuration options
options {
IGNORE_CASE = true; // Specifies whether the lexer should ignore case when matching tokens.
STATIC = false; // Specifies whether the generated parser methods should be static.
}

// Class name of the generated parser
PARSER_BEGIN(Parser)
package Analizador2;

public class Parser {}
PARSER_END(Parser)

// These are the tokens that the lexer will skip when parsing the input
SKIP : {
	" "
	| "\t"
	| "\r"
	| "\n"
}

// This is the list of tokens that the lexer will recognize, can be seen as the "alphabet" of the grammar
// or the list of terminal symbols of the grammar
TOKEN : {
      <PARENI: "(">
    | <PARENF: ")">
    | <CBRACKETI: "{" >
    | <CBRACKETF: "}" >
    | <BRACKETI: "[" >
    | <BRACKETF: "]" >
}

// The below methods are the grammar rules of the grammar, also called as productions,
// they are the non-terminal symbols of the grammar

// The first method is the way the parser parses a whole input file,
// which contains a list of expressions
void Verify():
{}
{
    (Expresion())+ <EOF>
}

// The first big parenthesis is the first production of the grammar,
// the second one is the second production
//
void Expresion():
{}
{
      (<PARENI> (Expresion())* <PARENF> // The first production
    | <CBRACKETI> (Expresion())* <CBRACKETF> // The first production
    | <BRACKETI> (Expresion())* <BRACKETF>) // The first production
    (Expresion())* // The second production
}