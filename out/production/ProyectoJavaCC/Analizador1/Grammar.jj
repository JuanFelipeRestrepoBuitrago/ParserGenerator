// This section is optional, these are some configuration options
options {
IGNORE_CASE = true; // Specifies whether the lexer should ignore case when matching tokens.
STATIC = false; // Specifies whether the generated parser methods should be static.
}

// Class name of the generated parser
PARSER_BEGIN(Parser)
package Analizador1;

public class Parser {}
PARSER_END(Parser)

// These are the tokens that the lexer will skip when parsing the input
SKIP : {
	" "
	| "\t"
	| "\r"
	| "\n"
}

// This is the list of tokens that the lexer will recognize, can be seen as the "alphabet" of the language
// or the list of terminal symbols of the grammar
TOKEN : {
	  <NUMBER: (["0"-"9"])+>
    | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
    | <PARENI: "(">
    | <PARENF: ")">
    | <ADDITION: "+">
    | <SUBSTRACTION: "-">
    | <PRODUCT: "*">
    | <DIVISION: "/">
}
// The below methods are the grammar rules of the grammar, also called as productions,
// they are the non-terminal symbols of the grammar

// The first method is the way the parser parses a whole input file, which contains a list of expressions
void Verify():
{}
{
    (Expresion())+ <EOF>
}

// This is the first production, the start symbol of the grammar E -> TE',
// it is joined with the next production E' -> +TE'|-TE'|ε to make it easier to parse
void Expresion():
{}
{
    ProductDivision()((<ADDITION> | <SUBSTRACTION>) ProductDivision())*
}

// This is the second production, the start symbol of the grammar T -> FT',
// it is joined with the next production T' -> *FT'|/FT'|ε to make it easier to parse
void ProductDivision():
{}
{
    Parentheses()((<PRODUCT> | <DIVISION>) Parentheses())*
}

// This is the third production, the last symbol of the grammar F -> (E)|n
void Parentheses():
{}
{
    <PARENI> Expresion() <PARENF> | Number()
}

// I added a last production to parse numbers, it is not part of the grammar but it is needed
// to parse the input, making the productions easier to understand through this code
void Number():
{}
{
    <NUMBER> | <DECIMAL>
}
